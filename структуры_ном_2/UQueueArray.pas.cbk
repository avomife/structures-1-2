
unit UQueueArray;

interface

  const
    {Максимальное количество элементов в очереди}
    MaxN = 5;

  type
  {Тип элемента очереди}
  TElem = integer;
  {Массив из элементов}
  TElems = array [0..MaxN-1] of TElem;
  {очередь из элементов}
  TQueue = record
    Elems : TElems; // массив из элементов
    Head, // голова (начало) очереди
    Count : integer; // количество элементов в очереди
  end;

  {Процедура инициализации очереди Q}
  procedure Init (var Q : TQueue);
  {Функция проверки очереди Q на пустоту.
  Возвращает значение true, если очередь пуст, false - в противном случае.}
  function IsEmpty (var Q : TQueue) : boolean;
  {Функция проверки очереди Q на полноту.
  Возвращает значение true, если очередь полна, false - в противном случае.}
  function IsFull (var Q : TQueue) : boolean;
  {Функция, которая пытается поместить элемент el в очередь Q.
  Возвращает значение true, если удалось элемент поместить в очередь,
  false - в противном случае}
  function TryPush (var Q : TQueue; el : TElem) : boolean;
  {Процедура добавления элемента el в очередь Q.}
  procedure Push (var Q : TQueue; el : TElem);
  {Функция, которая пытается достать элемент el из очереди Q.
  Возвращает значение true, если попытка удалась,
  false - в противном случае.}
  function TryPop (var Q : TQueue; var el : TElem) : boolean;
  {Функция, которая извлекает элемент el из очереди Q.
  В случае неудачи генерируется исключительная ситуация.}
  function Pop (var Q : TQueue) : TElem;
  {Процедура, которая извлекает элемент el из очереди Q.
  В случае неудачи генерируется исключительная ситуация.}
  procedure Pop_P (var Q : TQueue; var el : TElem);

implementation

uses SysUtils;

{Процедура инициализации очереди Q}
procedure Init (var Q : TQueue);
begin
  Q.Head:=0;
  Q.Count:=0;
end;

{Функция проверки очереди Q на пустоту.
Возвращает значение true, если очередь пуста, false - в противном случае.}
function IsEmpty (var Q : TQueue) : boolean;
begin
  Result:=Q.Count = 0;
end;

{Функция проверки очереди Q на полноту.
Возвращает значение true, если очередь полна, false - в противном случае.}
function IsFull (var Q : TQueue) : boolean;
begin
  Result:=Q.Count = MaxN;
end;

{Функция, которая пытается поместить элемент el в очередь Q.
Возвращает значение true, если удалось элемент поместить в очередь,
false - в противном случае.}
function TryPush (var Q : TQueue; el : TElem) : boolean;
var
  tail : integer;
begin
  Result:=Q.Count < MaxN;
  if Result then
    with Q do
    begin
      tail:=(Head+Count) mod MaxN;
      Elems[tail]:=el;
      inc(Count)
    end;
end;

{Процедура добавления элемента el в очередь Q}
procedure Push (var Q : TQueue; el : TElem);
begin
  if not TryPush(Q, el) then
    raise Exception.Create('Переполнение очереди');
end;

{Функция, которая пытается достать элемент el из очереди Q.
Возвращает значение true, если попытка удалась,
false - в противном случае.}
function TryPop (var Q : TQueue; var el : TElem) : boolean;
begin
  Result:=Q.Count > 0;
  if Result then
    with Q do
    begin
      el:=Elems[Head];
      Head:=(Head + 1) mod MaxN;
      dec(Count);
    end;
end;

{Функция, которая извлекает элемент el из очереди Q.
В случае неудачи генерируется исключительная ситуация.}
function Pop (var Q : TQueue) : TElem;
begin
  if not TryPop(Q, Result) then
    raise Exception.Create('Попытка достать элемент из пустой очереди');
end;

{Процедура, которая извлекает элемент el из очереди Q.
В случае неудачи генерируется исключительная ситуация.}
procedure Pop_P (var Q : TQueue; var el : TElem);
begin
  if not TryPop(Q, el) then
    raise Exception.Create('Попытка достать элемент из пустой очереди');
end;

end.
